package br.com.sevenheads.userService.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import java.util.Arrays;
import java.util.List;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
public class SecurityConfiguration {
	
	@Autowired
	private JwtAuthenticationFilter jwtAuthFilter;
	
	@Autowired
	private AuthenticationProvider authenticationProvider;

	public String crossOriginAllowedHeaders="*" ;
	public String crossOriginAllowedSites="*";

	@SuppressWarnings("removal")
	@Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http
        		.cors()
        		.and()
        		.csrf().disable()
                .authorizeHttpRequests(
                		authorizeConfig -> {
                			authorizeConfig.requestMatchers("/swagger-ui.html").permitAll();
                			authorizeConfig.requestMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll();
                			authorizeConfig.requestMatchers("/v1/api/auth/**").permitAll();
                			authorizeConfig.requestMatchers("/v1/formService/**").permitAll();
                			authorizeConfig.requestMatchers("/server/**").permitAll();
                			authorizeConfig.requestMatchers("/logout").permitAll();
                			authorizeConfig.anyRequest().authenticated();
                		})
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
				.headers()
				.frameOptions()
				.sameOrigin().addHeaderWriter((request,response)->{
					response.setHeader("Cache-Control","no-cache, no-store, max-age=0, must-revalidate, private");
					response.setHeader("Pragma","no-cache");
					response.setHeader("Access-Control-Allow-Origin",this.crossOriginAllowedSites);
				})
				.and()
                .authenticationProvider(authenticationProvider)
                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class)
                .build();
    }

	@Bean
	CorsConfigurationSource corsConfigurationSource() {
		CorsConfiguration configuration = new CorsConfiguration();
		configuration.setAllowedOrigins(List.of("*"));
		configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
		configuration.setAllowedHeaders(List.of("Authorization", "Content-Type"));
		configuration.setAllowCredentials(true);

		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		source.registerCorsConfiguration("/**", configuration);
		return source;
	}

	@Bean
	@Order(Ordered.HIGHEST_PRECEDENCE)
	protected CorsFilter crossFilter() {
		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		CorsConfiguration config = new CorsConfiguration();
		config.setAllowCredentials(false);
		config.setAllowedHeaders(Arrays.asList(crossOriginAllowedHeaders.split(",")));
		config.setAllowedOrigins(Arrays.asList(crossOriginAllowedSites.split(",")));
		//config.setAllowedHeaders("*"); whitelist all sites
		//config.setAllowedOrigins("*"); whitelist all headers
		config.addAllowedMethod(HttpMethod.OPTIONS);
		config.addAllowedMethod(HttpMethod.GET);
		config.addAllowedMethod(HttpMethod.POST);
		config.addAllowedMethod(HttpMethod.PUT);
		config.addAllowedMethod(HttpMethod.DELETE);
		config.addExposedHeader("Authorization");
		config.setMaxAge(new Long(1800));

		source.registerCorsConfiguration("/api/**", config);
		source.registerCorsConfiguration(MANAGEMENT, config);
		source.registerCorsConfiguration("/v2/api-docs", config);
		source.registerCorsConfiguration("/**", config);

		return new CorsFilter(source);
	}
}
